[{"title":"虚构：CS2204 Fundamentals of Internet Application Developments","path":"/CS2204f/","content":"我确实没猜到 Copilot 的想象力如此丰富，直到它把 UTM (University Technology Malasyia) 这个真名供出来的那一刻。 CS 2204 Fundamentals of Internet Application DevelopmentsCourse Information Course Duration: One Semester Credit Hours: 3 Offering Department: Computer Science Offering Term: Fall, Spring 2016 Prerequisites: Nil Exclusive Courses: CS 1303 - Introduction to Internet and Programming Teacher Information Instructor: Dr. David M. Chelberg Office: 206B, 2nd Floor East Wing, Engineering Building Office Hours: 2:00-5:00pm, MWF, or by appointment Course DescriptionHTML, CSS and JavaScript are the three core technologies for building web applications. This course will provide a thorough introduction to these technologies. Students will learn how to create and style web pages using HTML and CSS, and how to add interactivity to web pages using JavaScript. The course will also introduce the student to the client-server model and the use of PHP as a server-side scripting language. Students will learn how to use PHP to create dynamic web pages and how to connect to a database using PHP. The course will also introduce the student to the use of a framework (Bootstrap) to create responsive web pages. Students will learn how to use Bootstrap to create responsive web pages that can be viewed on a desktop computer, tablet and mobile phone. Course Objectives Understand the client-server model and how it is used to create web applications Understand the use of HTML to create web pages Understand the use of CSS to style web pages Understand the use of JavaScript to add interactivity to web pages Understand the use of PHP to create dynamic web pages Understand the use of Bootstrap to create responsive web pages Understand the use of a database to store data for a web application Course Learning Outcomes Create a web page using HTML Style a web page using CSS Add interactivity to a web page using JavaScript Create a dynamic web page using PHP Connect to a database using PHP Create a responsive web page using Bootstrap Course Assessment Lab Exercises Project Midterm Exam Final Exam Course Textbook Introduction to HTML5, CSS3 and JavaScript, 2nd Edition, by John Duckett Course Materials Laptop computer Access to the internet Text editor (e.g. Visual Studio Code, Atom, Sublime Text) Web browser (e.g. Chrome, Firefox, Edge) Web server (e.g. XAMPP, WAMP, MAMP) Database management system (e.g. MySQL, MariaDB) Course Schedule Week Topic Lab 1 HTML (1): Elements, Attributes, Lists Web and Internet Basics 2 HTML (2): Tables, Forms, Frames SSH and FTP 3 HTML (3): Multimedia, SVG, Canvas HTML Review 4 CSS (1): Selectors, Colors, Fonts Project (1) 5 CSS (2): Box Model, Positioning, Display SFTP, Personal Web Page 6 CSS (3): Media Queries, Responsive Design CSS Review 7 JavaScript (1): Variables, Operators, Loops Project (2) 8 JavaScript (2): Functions, Arrays, Objects Midterm Exam 9 JavaScript (3): Events, DOM JavaScript Review 10 PHP (1): Variables, Operators, Loops Project (3) 11 PHP (2): Functions, Arrays, Objects Project Consultation 12 PHP (3): Forms, Sessions, Cookies PHP Review 13 Bootstrap (1): Grid System, Typography Project (4) 14 Bootstrap (2): Components, JavaScript Final Review Course Assessment DetailsLab ExercisesThere are a total of 5 lab exercises in Week 2, 3, 6, 9, 12. Each exercise is worth 2% of the final grade, adding up to a total of 10%. Each exercise consists of several short-answer and coding questions. The lab exercises are designed to help students understand the concepts covered in the lectures. The lab exercises will be submitted via Moodle. The deadline for each lab exercise is 11:59pm on the end of the week. Late submissions will not be accepted. ProjectThere will only be one project, but it will be more and more completed as the semester progresses. The project will be worth 30% of the final grade. Part 1 focus on HTML, due by the end of Week 5, worth 6% Part 2 focus on CSS, due by the end of Week 8, worth 8% Part 3 focus on JavaScript, due by the end of Week 11, worth 10% Part 4 focus on PHP, due by the end of Week 14, worth 6% The project will be submitted via GitHub. After each part is completed, the student will release a stable version of the project on GitHub. The deadline for each part is 11:59pm on the end of the corresponding week. Late submissions will not be accepted. Midterm ExamThe midterm exam will be held in Week 8 (in Lab time). The exam will be worth 20% of the final grade. The midterm exam will be a closed-book exam. The exam will consist of multiple-choice, short-answer and coding questions. The exam will only cover HTML and CSS (i.e. Week 1 to Week 6). Detailed information about the midterm exam will be announced two weeks prior to the exam. Final ExamThe final exam will be held in Week 15 or 16, depends on the university’s final exam schedule. The exam will be worth 40% of the final grade. The final exam will be a closed-book exam. The exam will consist of multiple-choice and coding questions. The exam will only cover HTML, CSS, JavaScript and PHP (i.e. Week 1 to Week 12). As the Bootstrap topic is not covered in the final exam, students are encouraged (but not required) to use Bootstrap in their project. Detailed information about the final exam will be announced two weeks prior to the exam. Course PoliciesAttendanceAttendance is not compulsory. However, students are encouraged to attend the lectures. The lectures will be recorded and uploaded to Moodle. Late SubmissionLate submissions will not be accepted. Students are encouraged to submit their work early, to prevent any technical issues. Academic IntegrityStudents are expected to abide by the university’s academic integrity policy. Any violation of the policy will be dealt with according to the university’s policy. The policy can be found at https://www.utm.my/academic-integrity. Students are encouraged to read the policy before the start of the semester. Academic AccommodationStudents with disabilities are encouraged to contact the Office of Student Affairs (OSA) for academic accommodation. The OSA can be contacted at 03-5524 6000 Course Resources Moodle: https://moodle.utm.my/course/view.php?id=2204 Github: https://github.com/utm-cs/cs2204 Slack: https://utm-cs.slack.com CS2204 - RubricsThis document serves as a guide for the grading of assignments in this course. The rubrics are based on the course learning outcomes and the syallabus. Lab Exercises Time: Released during the lab, Week 2, 3, 6, 9, 12 only. Deadline: 11:59pm on the end of the week. Weight: 2% each, total 10%. Submission: Moodle Format: 2 short-answer questions and 2 coding questions. Grading: Each question is worth 1 point. The total score out of 4 then scales to 2% of the final grade. Each question would be graded 1 point, 0.5 point, or 0 point. Design of the Exercises: Short-answer question 1: Fill in the blanks about the points covered in the lecture. Short-answer question 2: Explain the difference between some concepts. Coding question 1: Fix the code snippet to make it work as expected. Coding question 2: Write a code snippet to achieve the expected result. Project Time: Released in Week 3. Checkpoint in Week 4, 7, 10, 13. Deadline: 11:59pm on the end of the following week (i.e. Week 5, 8, 11, 14). Weight: 6%, 8%, 10%, 6% each, total 30%. Submission: Github. The student will release a stable version of the project on Github. Format: The project will be a website for a fictional company. Student can make up many of the details, but the website must achieve the following requirements: Part 1: HTML Use HTML tags to structure the content of the website. Use HTML tags to add images, links, and tables to the website. Use HTML tags to add forms to the website. Part 2: CSS Use CSS to style the website. Use CSS to add animations to the website. Part 3: JavaScript Use JavaScript to handle user interactions, e.g. form validation. Use JavaScript for dynamic content. Part 4: PHP Use PHP to handle even more dynamic content, e.g. form submission and database queries. Grading Part 1: HTML (6%) Structure (2%): The website is well-strucutred, i.e. the content is organized into sections and subsections. The files are also well managed, by naming them properly and putting them in the right folders. HTML tags (4%): 1% for each of following: images, links, tables, forms. Part 2: CSS (8%) Style (6%): 2% for each of following: overall proper style; different style in different sections; responsive design. Animations (2%): The website has proper animations, e.g. the background color changes when the mouse hovers over a button. Part 3: JavaScript (10%) Form (4%): The form has proper validation, e.g. the form cannot be submitted if the user does not enter a valid email address. Interactions (4%): The website has interactions between different components, e.g. the content changes when the user clicks on a button. Code quality (1%): The code is well-organized, e.g. the code is properly indented, with proper comments and variable names. Browser compatibility (1%): The website works properly in all major browsers, e.g. Chrome, Firefox, Safari, Edge. Part 4: PHP (6%) Form (2%): The form can be submitted, and the submitted data is properly handled. Database (2%): The website has a database, and the database is properly used, e.g. the website can store and retrieve data from the database. Information security (1%): The website is secure, e.g. the database is properly protected from SQL injection attacks. Code quality (1%): The code is well-organized, e.g. the code is properly indented, with proper comments and variable names. Note: The project will be graded based on the latest stable version on Github. The student can make changes to the project after the deadline, but the changes will not be graded. Any of the subtasks can be graded from 0 to full points, with a step of 0.5. The total score out of 30 is directly converted to the final grade. Midterm Exam Time: Lab session in Week 8. Duration: 1 hour Weight: 20% Topics: HTML and CSS only. Format: 10 multiple-choice questions and 2 coding questions. Grading: Each MCQ is worth 1 points. Each coding question is worth 5 points. The total score out of 20 is directly converted to the final grade. MCQ included single-answer, multiple-answer. A partial answer for a multiple-answer question is worth 0.5 points. Each coding question can be graded from 0 to 5 points, with a step of 0.5. Design of the exam: MCQ are about the concepts covered in the lectures. Student should review lab exercise and lecture slides, and pay extra attention to the concepts in Lab 1 (Web and Internet). Coding question 1 will focus on HTML only. 1 point for each of the following: structure, images, links, tables, forms. Coding question 2 will focus on CSS but also require a good understanding of HTML. 3 points for the style, 2 points for the animations. Final Exam Time: Week 15 or 16, depending on the exam schedule. Duration: 2 hours Weight: 40% Topics: HTML, CSS, JavaScript and PHP. Format: 10 multiple-choice questions and 4 coding questions. Grade: Each MCQ is worth 1 points. Coding question worth 10, 8, 6, 6 points respectively. The total score out of 40 is directly converted to the final grade. MCQ included single-answer, multiple-answer. A partial answer for a multiple-answer question is worth 0.5 points. Each coding question can be graded from 0 to full points, with a step of 0.5. Design of the exam: MCQ are about the concepts covered in the lectures. Student should review lab exercise and lecture slides. Coding question 1 will focus on HTML and CSS. 1 point for each of the following: structure, images, links, tables, forms. 3 points for the style, 2 points for the animations. Coding question 2 will focus on JavaScript. 4 points for the form validation, 4 points for the interactions. Coding question 3 will focus on PHP. 2 points for the form submission, 4 points for the database queries. Coding question 4 will be an overall examination of a professional web devloper. 2 points for code robustness, 1 point for browser compatibility, 2 points for information security, 1 point for code quality. Final Grade The final grade is calculated as follows: 10% Lab Exercises 30% Project 20% Midterm Exam 40% Final Exam Course Policies Attendance: Attendance is not required. However, students are encouraged to attend the lectures and labs. The lectures and labs are designed to help students understand the course materials. Students who do not attend the lectures and labs will have a harder time understanding the course materials. Whatsoever, course materials will be made available online, so students can still learn the course materials without attending the lectures and labs. Late Submission: Late submission will not be accepted. The student will receive a 0 for the assignment. Academic Integrity: Academic integrity is expected. Any form of cheating will result in a 0 for the assignment and a report to the Academic Integrity Office. Special Needs: If you have a disability that requires accommodations, please contact the instructor as soon as possible. The instructor will work with you to ensure that you have equal access to the course materials and activities.","categories":["Fabrication"]},{"title":"虚构：CS2310 Computer Programming","path":"/CS2310f/","content":"为了简单地感受用新的符号体系征服世界的幻想，我在 Copilot 的辅助下完成了对一门无聊课程的无聊虚构。 无聊透顶的是，我觉得很有趣。 CS 2310 - Computer Programming (C++)Course DescriptionC++ is a general-purpose programming language that is widely used in industry. This course will introduce students to the C++ programming language and its use in developing software applications. Topics include: basic programming concepts, data types, control structures, functions, arrays, pointers, classes, inheritance, and file I&#x2F;O. Students will learn to write programs that solve problems using the C++ programming language. Compared to C++ courses offered in the early years, today the course will emphasize the use of C++ in the context of object-oriented programming, and Standard Template Library (STL) containers and algorithms. This course will also prepare students for operating systems and computer architecture courses. Course InformationDuration, Credits, Offered Department and Semester One Semester 3 Credits Department of Computer Science Fall, Spring 2022&#x2F;23 (note: If you are reading this page in the future, please check the course catalog for the most up-to-date information) Pre-requisites CS 1102 - Introduction to Computer Science, OR CS 1302 - Introduction to Computer Programming Exclusive Courses CS 2311 - Computer Programming (note: CS 2311 is intended for engineering students except those who major in CS) Course ContentsCourse Objectives Understand the basic concepts of C++ language and object-oriented programming. Utilize C++ language and STL to solve problems. Understand and implement the fundemental data structures and algorithms. Understand the basic concepts of operating systems and computer architecture. Write codes with good style and readability. Course Topics Week Topics Lab 1 Hello World NO LAB 2 Variables, Expressions, and Statements L1: Environment Setup 3 Conditional Statements and Loops L2: Simple Calculator 4 Functions, Arrays, and Pointers L3: Enhanced Calculator 5 Classes and Objects L4: Unnamed Simulator (I) 6 Inheritance L5: Unnamed Simulator (II) 7 STL Containers and Algorithms L6: Midterm Review 8 Midterm Exam NO LAB 9 Algorithm (I) L7: Merging and Sorting 10 Algorithm (II) L8: Bisection and Searching 11 Data Structures (I) L9: Linked List 12 Data Structures (II) L10: Unnamed Simulator (III) 13 File I&#x2F;O, Exception Handling, and Templates L11: Unnamed Simulator (IV) Course Assessment Week Assessment Weight 4 Enhanced Calculator 5% 6 Unnamed Simulator (II) 10% 8 Midterm Exam 20% 13 Unnamed Simulator (IV) 15% 13+ Final Exam 50% Continuous assessment: 50% Project: 30% Midterm Exam: 20% Submission after deadline NOT ACCEPTED Final Exam: 50% Held during the final exam period of the semester (Week 15 or 16) A minimum of 40% exam score is required to pass the course Make-up exam is only allowed for students who have a valid reason (e.g. illness, accident, etc.) A minimum of 35% final grade is required to pass the course Students might be deducted up to 5% for attendance and participation Course MaterialsTextbooks are not required for this course. On contrary, digital reference materials are frequently used in the course. Bringing a laptop to lecture is highly recommended, but not necessary in lab sessions (there are enough computers in the lab). However, students are encouraged to get a (digital) copy of the following textbooks for further C++ learning: C++ Primer Plus, 6th Edition by Stephen Prata Anti-Plagiarism PolicyGiven the nature of this course, students are expected to write their own codes. Students are not allowed to copy codes from other students or the Internet. Students are also not allowed to share their codes with other students. Any violation of this policy will be considered as academic dishonesty and will be dealt with accordingly. CS 2310 - Grading RubricsThis document is the grading rubrics for the course CS 2310 - Computer Programming (C++). It is based on the course syllabus. Continuous AssessmentWeek 4: Enhanced Calculator (5%)Since this is the very first project, it is graded very leniently. The goal is to get you familiar with the environment and the basic C++ syntax. A simple calculator is required to be implemented. The calculator should be able to perform the following operations: Addition, subtraction, multiplication, and division Exponentiation, square root, and logarithm Trigonometric functions (sine, cosine, and tangent) The deadline will be Wednesday of Week 5. NO SUBMISSION AFTER DEADLINE WILL BE ACCEPTED. The submission will be done via GitHub Classroom, which will also be employed in later projects. 0.5-2.5% for the program compiles and runs without error Note: To suit the leisure grading for this project only, you will only be deducted 0.5% for failing to compile or run. On the other hand, as long as your program compiles and runs, you will get 2.5% for this part. In later projects, you will get very low marks if your program fails to compile or run. 5% for the program meets the requirements Note: The score is capped at 5% for this project. If your program fails to compile or run, you can still get up to 4.5% mark for the project if you write mostly correct code. If your program complies and runs, and at least 2.5% is obtained from the first part, you will get full marks for this project. Week 6: Unnamed Simulator (II) (10%)This project is a continuation of the Week 5 project. The goal is to get you familiar with the basic OOP concepts. You should also save your project code in a GitHub repository for future development. TAs will guide you how to setup the GitHub repository. The details will be handed out in Week 5. The deadline will be Wednesday of Week 7. 1% for the program compiles and runs without error Note: If your program fails to compile or run, you will get up to 2% mark for the complete project. 4% for implementing the (I) part (as instructed in Week 5). In detail: 2% for the class design 2% for the implementation 4% for implementing the (II) part (as instructed in Week 6). In detail: 2% for the inheritance 2% for the C++11 features (e.g. auto, lambda, etc.) 1% for good programming style, practices, and readability Week 13: Unnamed Simulator (IV) (15%)This is the final project of the course. As a continuation of the Week 6 project, you will be required to implement a lot more features. The details will be handed out in Week 5, when the first part of the project begins. The deadline will be Wednesday of Week 14. 1% for the program compiles and runs without error Note: If your program fails to compile or run, you will get up to 3% mark for the complete project. 6% for Unnamed Simulator (III) part (as instructed in Week 12). In detail: 3% for bisection 3% for the path finding algorithm 6% for Unnamed Simulator (IV) part (as instructed in Week 13). In detail: 3% for linked list 3% for searching algorithm Note: Time and space complexity of the points listed above will be considered. Thus a correct but inefficient implementation will not get full marks. 1.5% for STL algorithms and containers. In detail: 0.5% for STL algorithms. You should utilize at least 2 STL algorithms properly. 1% for STL containers. You should utilize at least 2 STL containers properly. 0.5% for good programming style, practices, and readability Midterm Exam (20%)The midterm exam will be held in Week 8 during the lecture time. The exam will be closed book and closed note. Since the exam can only be completed on the lab computers, laptops are not required and calculators are not allowed. Covering Topics, Duration, and Format All topics during Weeks 1-7 1 hour and 30 minutes 4 multiple choice questions (20%), 4 code-completion questions (40%), 2 code-writing questions (40%) Grading Rubrics 20% for 4 multiple choice questions, 5% each 40% for 4 code-completion questions, 10% each. In detail: 5% each if the code compiles and runs without error 5% each if the code runs as expected 40% for 2 code-writing questions, 20% each. In detail: 6% each if the code compiles and runs without error 6% each for correctly completing the 1st subtask 8% each for correctly completing the complete task Final Exam (50%)The final exam will be held in Week 15 or 16 according to the schedule of the university. Same as the midterm exam, the exam will be closed book and closed note. Laptops are not required and calculators are not allowed. Covering Topics, Duration, and Format All topics during Weeks 1-13 2 hours 4 multiple choice questions (12%), 2 code-completion questions (16%), 4 code-writing questions (72%) Grading Rubrics 12% for 4 multiple choice questions, 3% each 16% for 2 code-completion questions, 8% each. In detail: 1% each if the code compiles and runs without error 7% each if the code runs as expected 72% for 4 code-writing questions, 18% each. In detail: 1% each if the code compiles and runs without error 5% each for correctly completing the 1st subtask 5% each for correctly completing the 2nd subtask 7% each for correctly completing the complete task GradingThe final grade will be calculated as follows: ​ Final Grade &#x3D; 0.2 * Midterm Exam + 0.5 * Final Exam + 0.3 * Continuous Assessment A minimum of 35% final grade is required to pass the course. A minimum of 40% exam grade is required to pass the course. A minimum of 85% final grade is required to get a grade of A range. Estimated from the past experience: the average final grade is around 60%. the average exam grade is around 50%. roughly 10% of the students get a grade of A range. roughly 5% of the students fail the course. A+ grade for this course shows both your diligence and intelligence. A+ students are reported to have an average GPA of 3.8 or above in their major. Academic IntegrityIt is students’ responsibility to understand and follow the university’s academic integrity policy. Given the nature of programming, it is difficult to detect plagiarism. Highly similar code is not necessarily plagiarism. However, if you copy the code from the Internet or your classmates, you will likely to be caught. You will be reported to the university’s academic integrity committee. The penalty can vary from a warning to expulsion from the university. You are encouraged to discuss the assignments with your classmates. You are also encouraged to use the Internet to search for solutions to the assignments. However, you should not copy the code from the Internet. You should not copy the code from your classmates. You should not copy the code from your previous assignments.","categories":["Fabrication"]},{"title":"白夜：2023 年 1 月","path":"/JR2301/","content":"无定形聚合物实验报告。实验已于 2023 年 1 月 31 日结束。 2023 年 1 月 31 日，星期二今天让 Copilot 帮我编课程大纲的时候，谈及学术诚信，蹦出了这样一段话：You are encouraged to discuss the assignments with your classmates. You are also encouraged to use the Internet to search for solutions to the assignments. However, you should not copy the code from the Internet. You should not copy the code from your classmates. You should not copy the code from your previous assignments. You should not copy the code from your future assignments. You should not copy the code from your future projects. You should not copy the code from your future jobs. You should not copy the code from your future life.怖い！为了迎接新文章的到来，本文的分类由 Internal 改为 Journal。不过今天还有一桩喜事。呃，用右键召唤出的终端，三次都诞生在错误的位置，差点把我真正的 CS2310 文件夹给橄榄了。考虑到经常出现右键召唤两个终端的问题，这个看起来很酷的东西 bug 真不少。2023 年 1 月 29 日，星期日有些时候关键词会在脑中盘旋，挥之不去。虽如此说，等一段时间它便会自然消失。比如说 nlogn，在两三年前低空飞行过。——这个名号来自某篇作为中学阅读题的小说或是散文，而不是搜索引擎认为的一首歌。但是今天，关键词是 Infinity，Eternity 和 Reality。倘若我们需要超-5运算定义 Reality 的下一个 Prestige layer，那我猜是 Divinity。再进一步，就只能用 Equinity 来表示游戏三个存档的平行关系，表示世界的真相，表示碰都不能碰的话题——它存在但无法参与运算，不像用迭代幂次定义永恒的过家家。但是昨天、今天和明天，关键词和这些都无关。一个逐利而无为的人，是浪漫主义还是现实主义？是正统而反传统还是传统而反正统？这个问题可能会盘旋很久。不过有一点是可以确定的：是我。2023 年 1 月 24 日，星期二又做了一个很有意思的梦。在得知 2 英寸手机不是 3 连折叠屏而是真的只有 1&#x2F;3 大小之后，我打开用四重 iOS 内核堆叠成的 Windows 手机，却发现已经变成了某国产安卓系统。当然，这玩意从来没在哪里流传过，是一个专注黑客功能的系统。所以这些都是嘛玩意？另外，四重 iOS 应该是 13，外加 12 嵌套 8 和 6，虽然我也不知道这些数字是怎么选定的。不过，好消息是，就如同在火灾中借助死亡真眼躲避混凝土钢筋攻击的主角一样，无法想象的场面很少有人关注细节。2023 年 1 月 23 日，星期一做了一个很有意思的梦，尽管在起床后大部分细节都散佚了，只能概述如下：（似乎是）一部有关成长的影片，5（也有可能是4）名女主成为了飞行运动员（鉴于我的匮乏阅历，这玩意肯定来自《苍彼》）。为什么是不能确定是否有5个主角呢？可能是因为有人存在感太低了，而更有可能的是配角过分的惹眼了。虽说，我印象中入戏最深的是那两页纸的体检报告单，居然绿区全打勾就可以了……下面垫着的是高中的体检报告。总之，在拍摄过程中，有一段要在过去和现在之间反复切换镜头，因此我用了一个开源项目。然而这个项目有一些小问题，不支持长宽比不统一的素材，降智的我决定人工剪辑。在完成工作后，我决定联系项目作者，其用户名称为“来自江苏的小吴”（为什么是中文？），我通过一些↓↑手段认出其人，但是电话联系不上。在观看剪辑成品时，智商突然恢复，我决定去自己写 branch 然后 PR。但是直到故事的结尾，我都没有联系上作者，而这部影片也没有实现我的夙愿。尽管如此，好久没做这种激动人心的梦了，不禁让人念叨起“逝去的青春”，这种顶级社恐永远避讳的概念。就如同下面一则中“奔跑的时候”，这确实是我在高中剪辑微电影时的经历，当时只是回教室取道具。但是这会儿可就不一样了——我奔跑是因为真的太忙了。忙，忙点好啊。我唯一的疑问是不知道这个梦是依从我的哪些癖好和妄念展开的。另外，剪辑本身是一件很享受的工作，但是花时间并不享受。对了，导致长宽比出现问题的那一段是带解说的麻雀，这就比较幽默了。2023 年 1 月 22 日，星期日主角（main characters）和主人公（protagonist）当然是不一样的概念。作为故事的读者，回顾这个故事的原形或初期设定时，难免会觉得，有些角色是命中注定的配角。但好巧不巧的是，有些故事中的主人公不仅是配角，还是路人角色。但好巧不巧的是，主角也是有次序之别的，与第二主角（deuteragonist）相比，其他的主角也只能是配角，比配角更落寞。顺便一提，我习惯将主人公和第二主角称作主视角和第二视角，虽说混淆了视角与人称的概念，但是合乎直觉。关于游戏难度，无论游戏官方给出多少挑战，硬核玩家都会视同门槛。所以我们有必要学习一下如何调节游戏难度。当然，此处的要点不是如何设计难度，而是通过难度名称引导玩家。比如说，比“极夜”更绝望的名称还有什么？永夜？如果一开始就是永夜，后面肯定是没有退路的，有必要追加“永夜前夜”作为过渡。重明夜？再明夜？永明夜？极明夜？白夜？2023 年 1 月 17 日，星期二好久不见。或许不能说好久不见，因为从未见过。我本来计划每天都写一点，但是这不现实，也只能写一点点想法，根本就没有实现记录生活的目标。是的，本来还有一个与 Internal 对立的 External 栏目，现在没有开坑的打算。这些天也免不了熬夜，还是我自找的熬夜。看着维基百科上的医学条目令人感叹人体如此脆弱，从耳聋到动脉硬化，无人幸免。不过，一个未必很坏的坏消息是，人在社会上也是如此脆弱，说不定举棋不定就会被车送倒。未来无论远近都不见；现实又只会避重就轻，过去也只能概括为埋在花园里的尸体——倘真如此，那过去还是有点可记录的。就算我再想忘记部分，可以非常直白地概括为令人羞愧的记忆；就算我再把过去总结为费钱费时的一场空；我确实记得对青春非常及时的概括——有的时候奔跑就让人感到幸福了。虽然也只是有的时候而已，我再也没有像那个时候激动过——至少在奔跑的时候如此。2023 年 1 月 14 日，星期四今天是这个博客建立的日子，不过不太值得庆祝，因为没花多少功夫。很久以前用过的 murasaki 不知为何跑不起来，逛了一圈官网决定换用这个主题。Stellar 确实引入了不少方便的容器等功能。不过有一点是文档里面没写明白的，favicon 等文件以 /source 为根目录。此外，_config.stellar.yml 需要参考 stellar 项目内的 _config.yml 自定义。当然，这并不是重点。为什么要建个博客？写了文章怕丢失吧。毕竟除了我是不会有人删除 Github Pages 的，至少在相当长的一段短时间内。为什么不写个 about 页面？以后应该是会写的。但是我觉得现在应该没必要介绍自己。认识我的人都不会看这个博客，看这个博客的人……呃，根本就没有。记录文章只是这个博客的一部分。另一部分应该说是一个永久巨型剪贴板。但我从不会粘贴有用的东西，只是似是而非的胡诌。不过这没有关系，我想写点什么，我准备写点什么，我正在写点什么：无人知晓，但是博客给我的写作欲望远高于任何的笔记软件。并且我由衷希望我本人不会删除这个项目，至少在相当长的一段短时间内。","categories":["Journal"]},{"title":"评课：JC2066 IT Professionals: Ethical, Legal and Social Issues","path":"/JC2066/","content":"本文同步发表于城墙。 当你看到这个标题的时候，可能会考虑到这两个事实：城墙根本就没有活人；JC2066 只在 Sem A 开。 不过既然这门课学长们都没上过，我觉得有必要在忘干净之前写一点。 （当然，以下内容也可能不适用于 2023&#x2F;24 Sem A，谁知道会怎么改呢） 首先是一些基本事实：JC2066 是 CS2066 的终极豪华版，从 2022&#x2F;23 Sem A 开始开设。 Course Content课程编号中的 JC 是 Joint Course 的缩写，相比 CS2066，授课单位除了 Department of Computer Science 还增加了 School of Law 和 Department of Public Policy。 因此，13 节 Lecture 中，前 7 节在讲课程主要内容，后 6 节都是其他学院的讲师来做研讨会（seminar）。 由于这个学期学校要求 120+ 人的大班课必须纯线上授课，加上各种口音，我后 6 节课基本没听进去……但是这并不重要，这些讲座基本和期末考无关（有一道 4 分的小题自选一个话题讨论），写 Essay 的时候参考一下 PPT 即可。 除了 Lecture 还有 8 节 Tutorial。学期开始组队，结束时 presentation，中间还有一些算参与分的小项目。 可以参考一下每一节课的标题LectureIntroductionEthical Foundations &amp; Research EthicsAI &amp; AlgorithmsAlgorithmic Bias &amp; AI FairnessPrivacy &amp; SurveillanceCivic responsibility &amp; misinformationInequality and JusticeSmart City and e-governmentPrivacy, rights to forget &amp; other ethics issuesUsing VR to engage diverse populations &#x2F; AI and Data EthicsIP Legal Issues and Ethical Concerns of AI TechnologyEthical and legal challenges in the development of autonomous carsRegulatory systems supporting innovationTutorialGroup Activities: IntroductionGroup Activities: Black Mirror Writer’s RoomDetecting Bias in a Medical Risk Score AlgorithmGroup Activities: Value CardsProject OverviewUser-Centered DesignProject Part 1 PresentationProject Final Presentation Assessment作业和打分相比 CS2066 (2 group assignment: 40%; short test: 10%; final: 50%) 的变化更显著。 虽然以下内容和 Syllabus 不一致，但应该是对的。（老师强调过 assignment 的分数） 2 (Individual) Assignment (40%)Assignment 1（20%，第5周公布，第9周截止）的主题是优化一个大学录取算法以减少偏差（bias），分为 Coding 和 Non-coding 两个作业版本。Coding 版一半分数是根据提示逐步修改算法，另一半分数是回答问题。而 Non-coding 版的前一半分数改为自行设计算法并手算例子。 很坑的是，Coding 版细节繁多，工作量明显要大很多，而且题目还有一些描述冲突，这些都到 ddl 前一晚才 QA……然后是最重要的一点，提交之前不要忘记改输入文件名，我相信 OIer 一定会犯这个毛病……这害得我晚交两天，不过最后没什么大碍。 Assignment 2（20%，第11周公布，第15→16周截止）则更为重量级，要求写一篇哲学短文（1800-2200词）和两篇反思短文（500-800词），其中第一篇反思的主题固定为 ACM Code of Conduct，其余两篇的主题有若干选项。 写反思不难，多多涉及课上知识点。但是哲学短文就比较折磨了，蹦出了从没听说过的名词，整个话题也只在研讨会部分涉及（讲的AI艺术版权问题解决方案我就直接拿来用了）……我个人参考了相关领域的哲学论文，机翻之下囫囵吞枣才能整合出一些观点。 总的来说，assignment 量非常大，对大一新生来说，挑战性未免有点高。 也可以参考一下备选话题Philosophy EssayAI, VR, and the Metaverse (whether virtual reality can have the same sort of value as life in nonvirtual reality)An AI Democracy?AI and Art (physical materiality; human contribution; artistic creativity; ownership)Reflection EssayAI in Sci-FiDiversity and InclusivenessPlatform PolicyEquality and Inclusiveness (Group) Project (20%)Project Part 1（第8周公布，第9→10周截止，第11周演讲）要求分析一个未解决的IT相关技术问题，重点在于对现有解决方案的研究、设计空间和潜在挑战。 Project Part 2（第14周截止，第13周演讲）要求设计一个解决方案，重点在于创新点、产品演示和可行性证明。当然你不需要写代码或者做实物模型，只需要 low-fidelity prototype。课上讲的 high-fidelity prototype 最终演化成 app 上市的例子我觉得挺有意思的，但反正我们是没那个水平。 如你所见，两个部分都需要上传报告，并在 Tutorial 上演讲。报告需要一定的格式，并且做好 reference。 Part 1 我们第 9 周周五才搜资料列提纲，周六一起做了大半天写完，然后周一得知延期一周……懒得再改了。如果计划不变的话，时间确实是很紧的，建议不要在 WhatsApp 或者 Zoom 上面摸鱼，能线下一起写效率会高很多，有问题可以现场解决。可以说，Part 1 关键就在搜资料找论文，然后集百家之长——虽说整合各种特性也导致在演讲后老师指出”目标群体不清晰“。 Part 2 的时间比较宽裕，但是我们没怎么准备演讲，所幸对分数影响不大。老师确实是好人啊，在演讲后指出”lo-fi app的指引不清晰，要加上前一个页面的按钮指向下一个页面的箭头来体现操作逻辑“。 总体来说，这个项目没什么技术要求，但毕竟是团队项目，合作还是很重要的。 Quiz and Participation (10%)若干次 Lecture 和 Tutorial 课后布置了 Reflection 作业，基本都是要回答问题。 此外，Tutorial 4 讲了 TPR&#x2F;TNR&#x2F;FPR&#x2F;FNR&#x2F;Accuracy&#x2F;Disparity 等重要统计概念，有两个 quiz，课后要求上交小组讨论结果。这部分在期末考也有涉及。 Final (30%)在考试准备周老师在 Zoom 上划了前 7 节课的重点，并提供了一张样卷（不是历年考试卷，因为课大改了）。 结果 Final 实际上就是样卷的终极豪华版，题目量增加很多，两个小时时间写六道大题还是比较紧凑的；但是题目考点和问法几乎都和样卷一样，只要复习了就能答个八九不离十。 但是我前面也说了，明年是否还是这样就不得而知了。不管怎么说，课件总是得复习的。 Summary我不想写总结了，累死。反正这是一门必修课，出现在课表上那就去上呗。坑很多，工作量还很大，但是还是比较有意思的。否则本来就没事干的我大一上得无聊死，哈哈。","categories":["Course"]}]